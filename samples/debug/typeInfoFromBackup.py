#!/usr/bin/env python
'''Loads the typeinfo's from a MySQL backup file generated by mysqldump.
Note, this is probably not super-reliable; I use this mostly to check the backups'''

import os
import sys
from plex import *
import logging
import json

# Here's where we define the lexicon for the parser. 
letter = Range("AZaz")
digit = Range("09")
hspace = Any(" \t")
space = Any(" \t\n")
newline = Str("\n")
spchars = Any(".-_:+/*$<>")
comma = Str(",")
semicolon = Str(";")
equals=Str("=")
quote = Str('"')
name = Rep1(letter | digit | spchars)

nameinquotes = Str("'") + Rep1(AnyBut("'")) + Str("'")

openParan = Str("(")
closeParan = Str(")")
comment = Bol + Str("--") + Rep(AnyBut("\n")) + Str("\n")

fileLexicon = Lexicon([
    (comment,  'comment'),
    (space, IGNORE),
    (Str("INSERT INTO `PVTypeInfo` VALUES"), Begin("beginInsert")),
    State('beginInsert', [
                    (openParan, Begin("newTypeInfo")),
                    (hspace, IGNORE),
                    (semicolon, Begin('')),
                    (comma, IGNORE)
                    ]),
    State('newTypeInfo', [
                    (hspace, IGNORE),
                    (nameinquotes, 'pvName'),
                    (comma, Begin("typeInfoJSON"))
                    ]),
    State('typeInfoJSON', [
                    (hspace, IGNORE),
                    (nameinquotes, 'typeInfo'),
                    (comma, Begin("createmodifieddate"))
                    ]),
    State('createmodifieddate', [
                    (hspace, IGNORE),
                    (nameinquotes, 'modifieddate'),
                    (closeParan, Begin("beginInsert")),
                    ]),
    (Rep1(AnyBut(" \t\n")), IGNORE)
])

logger = logging.getLogger('dbbackupparser')

def parseDBBackupFiles(files, func):
    '''Parses a list of DB backup files. We apply function to each pvName and typeInfo.'''
    pv2typeInfo = {}
    pvs = 0
    for file in files:
        print "Parsing file", file
        with open(file, 'r') as f:
            scanner = Scanner(fileLexicon, f, file)
            pvName = '' 
            while 1:
                token = scanner.read()
                if token[0] is None:
                    break
                elif token[0] == 'pvName':
                    pvName = token[1].strip("'")
                    pvs = pvs + 1
                    if pvs % 10000 == 0:
                        print "PV count", pvs
                elif token[0] == 'typeInfo':
                    typeInfoStr = token[1].strip("'").replace('\\', "")
                    typeInfo = json.loads(typeInfoStr)
                    func(pvName, typeInfo)

def diffADELMDEL(pvName, typeInfo):
    extraFields = typeInfo['extraFields']
    if 'ADEL' in extraFields and 'MDEL' in extraFields:
        if extraFields['MDEL'] != extraFields['ADEL']:
            if float(typeInfo['computedEventRate']) > 2.0:
                print pvName, extraFields['MDEL'], extraFields['ADEL'],  typeInfo['computedEventRate']
        else:
            print pvName, "are the same"
    else:
        print pvName, "does not have one of ADEL or MDEL" 


if __name__ == "__main__":
    parseDBBackupFiles(sys.argv[1:], diffADELMDEL)
